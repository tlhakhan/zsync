// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Empty
	Dataset
	DatasetList
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Dataset struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Dataset) Reset()                    { *m = Dataset{} }
func (m *Dataset) String() string            { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()               {}
func (*Dataset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DatasetList struct {
	List []*Dataset `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *DatasetList) Reset()                    { *m = DatasetList{} }
func (m *DatasetList) String() string            { return proto.CompactTextString(m) }
func (*DatasetList) ProtoMessage()               {}
func (*DatasetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DatasetList) GetList() []*Dataset {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "service.Empty")
	proto.RegisterType((*Dataset)(nil), "service.Dataset")
	proto.RegisterType((*DatasetList)(nil), "service.DatasetList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Zsync service

type ZsyncClient interface {
	Exists(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error)
	GetSnapshotsFor(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*DatasetList, error)
	GetFilesystems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DatasetList, error)
}

type zsyncClient struct {
	cc *grpc.ClientConn
}

func NewZsyncClient(cc *grpc.ClientConn) ZsyncClient {
	return &zsyncClient{cc}
}

func (c *zsyncClient) Exists(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := grpc.Invoke(ctx, "/service.Zsync/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zsyncClient) GetSnapshotsFor(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*DatasetList, error) {
	out := new(DatasetList)
	err := grpc.Invoke(ctx, "/service.Zsync/GetSnapshotsFor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zsyncClient) GetFilesystems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DatasetList, error) {
	out := new(DatasetList)
	err := grpc.Invoke(ctx, "/service.Zsync/GetFilesystems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Zsync service

type ZsyncServer interface {
	Exists(context.Context, *Dataset) (*Dataset, error)
	GetSnapshotsFor(context.Context, *Dataset) (*DatasetList, error)
	GetFilesystems(context.Context, *Empty) (*DatasetList, error)
}

func RegisterZsyncServer(s *grpc.Server, srv ZsyncServer) {
	s.RegisterService(&_Zsync_serviceDesc, srv)
}

func _Zsync_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZsyncServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Zsync/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZsyncServer).Exists(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zsync_GetSnapshotsFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZsyncServer).GetSnapshotsFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Zsync/GetSnapshotsFor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZsyncServer).GetSnapshotsFor(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zsync_GetFilesystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZsyncServer).GetFilesystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Zsync/GetFilesystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZsyncServer).GetFilesystems(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Zsync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Zsync",
	HandlerType: (*ZsyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Zsync_Exists_Handler,
		},
		{
			MethodName: "GetSnapshotsFor",
			Handler:    _Zsync_GetSnapshotsFor_Handler,
		},
		{
			MethodName: "GetFilesystems",
			Handler:    _Zsync_GetFilesystems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xd8, 0xb9,
	0x58, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x95, 0x64, 0xb9, 0xd8, 0x5d, 0x12, 0x4b, 0x12, 0x8b, 0x53,
	0x4b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0xc0, 0x6c, 0x25, 0x63, 0x2e, 0x6e, 0xa8, 0xb4, 0x4f, 0x66, 0x71, 0x89, 0x90, 0x0a, 0x17, 0x4b,
	0x4e, 0x66, 0x71, 0x89, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x80, 0x1e, 0xcc, 0x74, 0xa8,
	0x9a, 0x20, 0xb0, 0xac, 0xd1, 0x0a, 0x46, 0x2e, 0xd6, 0xa8, 0xe2, 0xca, 0xbc, 0x64, 0x21, 0x1d,
	0x2e, 0x36, 0xd7, 0x8a, 0xcc, 0xe2, 0x92, 0x62, 0x21, 0x0c, 0xb5, 0x52, 0x18, 0x22, 0x42, 0x96,
	0x5c, 0xfc, 0xee, 0xa9, 0x25, 0xc1, 0x79, 0x89, 0x05, 0xc5, 0x19, 0xf9, 0x25, 0xc5, 0x6e, 0xf9,
	0x45, 0x58, 0xb4, 0x89, 0xa0, 0x8b, 0x80, 0x1d, 0x66, 0xc6, 0xc5, 0xe7, 0x9e, 0x5a, 0xe2, 0x96,
	0x99, 0x93, 0x5a, 0x5c, 0x59, 0x5c, 0x92, 0x9a, 0x5b, 0x2c, 0xc4, 0x07, 0x57, 0x07, 0xf6, 0x28,
	0x76, 0x7d, 0x49, 0x6c, 0xe0, 0x70, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xae, 0x5f,
	0x37, 0x28, 0x01, 0x00, 0x00,
}
